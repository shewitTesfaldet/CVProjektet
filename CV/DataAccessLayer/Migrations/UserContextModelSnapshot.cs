// <auto-generated />
using System;
using Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CV.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CV.Models.CV_", b =>
                {
                    b.Property<int>("CID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CID"));

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.HasKey("CID");

                    b.HasIndex("UID")
                        .IsUnique();

                    b.ToTable("CV_s");

                    b.HasData(
                        new
                        {
                            CID = 1,
                            Picture = "profile_picture1.jpg",
                            UID = 1
                        },
                        new
                        {
                            CID = 2,
                            Picture = "profile_picture2.jpg",
                            UID = 2
                        },
                        new
                        {
                            CID = 3,
                            Picture = "profile_picture3.jpg",
                            UID = 3
                        },
                        new
                        {
                            CID = 4,
                            Picture = "profile_picture4.jpg",
                            UID = 4
                        },
                        new
                        {
                            CID = 5,
                            Picture = "profile_picture5.jpg",
                            UID = 5
                        });
                });

            modelBuilder.Entity("CV.Models.CV_Competence", b =>
                {
                    b.Property<int>("CID")
                        .HasColumnType("int");

                    b.Property<int>("CompID")
                        .HasColumnType("int");

                    b.HasKey("CID", "CompID");

                    b.HasIndex("CompID");

                    b.ToTable("CV_Competences");

                    b.HasData(
                        new
                        {
                            CID = 1,
                            CompID = 2
                        },
                        new
                        {
                            CID = 2,
                            CompID = 3
                        },
                        new
                        {
                            CID = 4,
                            CompID = 5
                        },
                        new
                        {
                            CID = 1,
                            CompID = 4
                        },
                        new
                        {
                            CID = 4,
                            CompID = 2
                        });
                });

            modelBuilder.Entity("CV.Models.CV_Education", b =>
                {
                    b.Property<int>("CID")
                        .HasColumnType("int");

                    b.Property<int>("EdID")
                        .HasColumnType("int");

                    b.HasKey("CID", "EdID");

                    b.HasIndex("EdID");

                    b.ToTable("CV_Educations");

                    b.HasData(
                        new
                        {
                            CID = 1,
                            EdID = 2
                        },
                        new
                        {
                            CID = 2,
                            EdID = 3
                        },
                        new
                        {
                            CID = 4,
                            EdID = 5
                        },
                        new
                        {
                            CID = 1,
                            EdID = 4
                        },
                        new
                        {
                            CID = 4,
                            EdID = 2
                        });
                });

            modelBuilder.Entity("CV.Models.Chat", b =>
                {
                    b.Property<int>("MID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MID"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.HasKey("MID");

                    b.HasIndex("UID");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            MID = 1,
                            Date = new DateTime(2022, 1, 10, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Read = true,
                            Text = "Hej, hur mår du?",
                            UID = 1
                        },
                        new
                        {
                            MID = 2,
                            Date = new DateTime(2022, 1, 10, 12, 35, 0, 0, DateTimeKind.Unspecified),
                            Read = true,
                            Text = "Jag mår bra, tack!",
                            UID = 2
                        },
                        new
                        {
                            MID = 3,
                            Date = new DateTime(2022, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Read = false,
                            Text = "Vad har du gjort idag?",
                            UID = 3
                        },
                        new
                        {
                            MID = 4,
                            Date = new DateTime(2022, 1, 10, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            Read = false,
                            Text = "Jobbat och tränat lite.",
                            UID = 4
                        },
                        new
                        {
                            MID = 5,
                            Date = new DateTime(2022, 1, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Read = false,
                            Text = "Låter bra! Vad har du för planer resten av dagen?",
                            UID = 5
                        });
                });

            modelBuilder.Entity("CV.Models.Competence", b =>
                {
                    b.Property<int>("CompID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompID"));

                    b.Property<int?>("CV_CID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompID");

                    b.HasIndex("CV_CID");

                    b.ToTable("Competence");

                    b.HasData(
                        new
                        {
                            CompID = 1,
                            Description = "C# Programming"
                        },
                        new
                        {
                            CompID = 2,
                            Description = "Web Development"
                        },
                        new
                        {
                            CompID = 3,
                            Description = "Data Analysis"
                        },
                        new
                        {
                            CompID = 4,
                            Description = "Project Management"
                        },
                        new
                        {
                            CompID = 5,
                            Description = "Communication Skills"
                        });
                });

            modelBuilder.Entity("CV.Models.Education", b =>
                {
                    b.Property<int>("EdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EdID"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CV_CID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EdID");

                    b.HasIndex("CV_CID");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            EdID = 1,
                            BeginDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Master's in Computer Science",
                            EndDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EdID = 2,
                            BeginDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bachelor's in Information Technology",
                            EndDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EdID = 3,
                            BeginDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "High School Diploma",
                            EndDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EdID = 4,
                            BeginDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Certification in Web Development",
                            EndDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EdID = 5,
                            BeginDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Online Course in Data Science",
                            EndDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CV.Models.Experience", b =>
                {
                    b.Property<int>("EID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EID"));

                    b.Property<int>("CID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EID");

                    b.HasIndex("CID");

                    b.ToTable("Experience");

                    b.HasData(
                        new
                        {
                            EID = 1,
                            CID = 1,
                            Description = "Software Developer at ABC Tech"
                        },
                        new
                        {
                            EID = 2,
                            CID = 2,
                            Description = "Data Analyst at XYZ Analytics"
                        },
                        new
                        {
                            EID = 3,
                            CID = 3,
                            Description = "Project Manager at Acme Projects"
                        },
                        new
                        {
                            EID = 4,
                            CID = 4,
                            Description = "Internship at DEF Corporation"
                        },
                        new
                        {
                            EID = 5,
                            CID = 5,
                            Description = "Marketing Coordinator at LMN Marketing"
                        });
                });

            modelBuilder.Entity("CV.Models.LogInUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CV.Models.Project", b =>
                {
                    b.Property<int>("PID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PID"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PID");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            PID = 1,
                            BeginDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Developing a responsive web application.",
                            EndDate = new DateTime(2022, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Web Development Project"
                        },
                        new
                        {
                            PID = 2,
                            BeginDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Creating a cross-platform mobile application.",
                            EndDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mobile App Development"
                        },
                        new
                        {
                            PID = 3,
                            BeginDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Designing and implementing a relational database.",
                            EndDate = new DateTime(2022, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Database Management System"
                        },
                        new
                        {
                            PID = 4,
                            BeginDate = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Applying machine learning algorithms to solve a specific problem.",
                            EndDate = new DateTime(2023, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Machine Learning Project"
                        },
                        new
                        {
                            PID = 5,
                            BeginDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Working on a software project using agile methodologies.",
                            EndDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Agile Software Development"
                        });
                });

            modelBuilder.Entity("CV.Models.User", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Epost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Privat")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Adress = "456 Oak Street",
                            ConfirmPassword = "password1",
                            Epost = "alice.johnson@example.com",
                            Firstname = "Alice",
                            Lastname = "Johnson",
                            Password = "password1",
                            Privat = true,
                            Username = "user1"
                        },
                        new
                        {
                            UID = 2,
                            Adress = "789 Pine Avenue",
                            ConfirmPassword = "password2",
                            Epost = "bob.smith@example.com",
                            Firstname = "Bob",
                            Lastname = "Smith",
                            Password = "password2",
                            Privat = false,
                            Username = "user2"
                        },
                        new
                        {
                            UID = 3,
                            Adress = "101 Elm Lane",
                            ConfirmPassword = "password3",
                            Epost = "charlie.brown@example.com",
                            Firstname = "Charlie",
                            Lastname = "Brown",
                            Password = "password3",
                            Privat = true,
                            Username = "user3"
                        },
                        new
                        {
                            UID = 4,
                            Adress = "202 Maple Road",
                            ConfirmPassword = "password4",
                            Epost = "david.lee@example.com",
                            Firstname = "David",
                            Lastname = "Lee",
                            Password = "password4",
                            Privat = false,
                            Username = "user4"
                        },
                        new
                        {
                            UID = 5,
                            Adress = "303 Cedar Street",
                            ConfirmPassword = "password5",
                            Epost = "eva.miller@example.com",
                            Firstname = "Eva",
                            Lastname = "Miller",
                            Password = "password5",
                            Privat = true,
                            Username = "user5"
                        });
                });

            modelBuilder.Entity("CV.Models.User_Project", b =>
                {
                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.HasKey("PID", "UID");

                    b.HasIndex("UID");

                    b.ToTable("UserProjects");

                    b.HasData(
                        new
                        {
                            PID = 2,
                            UID = 1
                        },
                        new
                        {
                            PID = 3,
                            UID = 2
                        },
                        new
                        {
                            PID = 5,
                            UID = 4
                        },
                        new
                        {
                            PID = 4,
                            UID = 1
                        },
                        new
                        {
                            PID = 2,
                            UID = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CV.Models.CV_", b =>
                {
                    b.HasOne("CV.Models.User", "User")
                        .WithOne("CV_")
                        .HasForeignKey("CV.Models.CV_", "UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV.Models.CV_Competence", b =>
                {
                    b.HasOne("CV.Models.CV_", "CV")
                        .WithMany("CV_Competences")
                        .HasForeignKey("CID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV.Models.Competence", "Competence")
                        .WithMany("CV_Competences")
                        .HasForeignKey("CompID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Competence");
                });

            modelBuilder.Entity("CV.Models.CV_Education", b =>
                {
                    b.HasOne("CV.Models.CV_", "CV")
                        .WithMany("CV_Education")
                        .HasForeignKey("CID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV.Models.Education", "Education")
                        .WithMany("CV_Education")
                        .HasForeignKey("EdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Education");
                });

            modelBuilder.Entity("CV.Models.Chat", b =>
                {
                    b.HasOne("CV.Models.User", "user")
                        .WithMany("Chats")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("CV.Models.Competence", b =>
                {
                    b.HasOne("CV.Models.CV_", null)
                        .WithMany("Competence")
                        .HasForeignKey("CV_CID");
                });

            modelBuilder.Entity("CV.Models.Education", b =>
                {
                    b.HasOne("CV.Models.CV_", null)
                        .WithMany("Education")
                        .HasForeignKey("CV_CID");
                });

            modelBuilder.Entity("CV.Models.Experience", b =>
                {
                    b.HasOne("CV.Models.CV_", "cv")
                        .WithMany("Experiences")
                        .HasForeignKey("CID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cv");
                });

            modelBuilder.Entity("CV.Models.User_Project", b =>
                {
                    b.HasOne("CV.Models.Project", "project")
                        .WithMany("User_Projects")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV.Models.User", "user")
                        .WithMany("User_Projects")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("project");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CV.Models.LogInUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CV.Models.LogInUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV.Models.LogInUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CV.Models.LogInUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV.Models.CV_", b =>
                {
                    b.Navigation("CV_Competences");

                    b.Navigation("CV_Education");

                    b.Navigation("Competence");

                    b.Navigation("Education");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("CV.Models.Competence", b =>
                {
                    b.Navigation("CV_Competences");
                });

            modelBuilder.Entity("CV.Models.Education", b =>
                {
                    b.Navigation("CV_Education");
                });

            modelBuilder.Entity("CV.Models.Project", b =>
                {
                    b.Navigation("User_Projects");
                });

            modelBuilder.Entity("CV.Models.User", b =>
                {
                    b.Navigation("CV_");

                    b.Navigation("Chats");

                    b.Navigation("User_Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
